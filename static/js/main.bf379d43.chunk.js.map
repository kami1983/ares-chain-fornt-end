{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","BlockNumber.js","Metadata.js","NodeInfo.js","UseCaseStaking.js","UseCaseHome.js","UseCase.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","types","Address","AskPeriodNum","AskPointNum","AuthorityAres","AccountParticipateEstimates","account","end","estimates","range_index","eth_address","multiplier","reward","AresPriceData","price","account_id","create_bn","fraction_len","raw_number","timestamp","BalanceOf","ChooseWinnersPayload","block_number","winners","public","estimates_config","symbol","EstimatesState","_enum","EstimatesType","FractionLength","HttpError","IoErr","TimeOut","StatusErr","ParseErr","HttpErrTracePayload","trace_data","auth","HttpErrTraceData","err_auth","err_status","tip","JsonNumberValue","integer","fraction","fraction_length","exponent","Keys","LookupSource","MultiplierOption","OcwControlData","need_verifier_check","open_free_price_reporter","open_paid_price_reporter","OffchainSignature","PaidValue","amount","is_income","PurchasedId","PriceKey","PriceToken","PreCheckPayload","pre_check_stash","pre_check_auth","PreCheckResultPayload","pre_check_list","PreCheckCompareLog","chain_avg_price_list","validator_up_price_list","raw_precheck_list","PreCheckStruct","price_key","number_val","max_offset","PricePayloadSubPrice","PricePayloadSubJumpBlock","PricePayload","jump_block","PreCheckStatus","PurchasedRequestData","offer","submit_threshold","max_duration","request_keys","PurchasedPricePayload","purchase_id","PurchasedAvgPriceData","reached_type","price_data","PurchasedDefaultData","avg_keep_duration","PurchasedForceCleanPayload","BlockNumber","purchase_id_list","PurchaseId","Releases","RequestInterval","SymbolEstimatesConfig","estimates_type","id","ticket_price","symbol_completed_price","symbol_fraction","start","distribute","deviation","range","total_reward","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","text","toUpperCase","icon","initialAddress","length","useEffect","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","Button","basic","circular","color","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","query","system","balance","data","free","toHuman","unsub","catch","Label","pointing","Icon","AccountSelector","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","label","extra","version","metadata","setMetadata","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","getInfo","Promise","all","nodeName","nodeVersion","NodeInfo","accountPair","checkAddress","setCheckAddress","addressTo","formState","preCheckTaskList","setPreCheckTaskList","finalPerCheckStatus","setFinalPerCheckStatus","waitValidatorList","setWaitValidatorList","waitValidatorSessionKeyList","setWaitValidatorSessionKeyList","availableAccounts","loadPreCheckTaskList","aresOracle","authorities","loadStakingValidators","staking","validators","entries","exposures","resultList","tmp","args","k","push","loadSessionValidators","session","countStakingWaitValidators","sessionValidators","stakingValidators","sessionStash","removeIdx","findIndex","element","splice","getSessionKeys","stashId","nextKeys","getFinalPerCheckResult","finalPerCheckResult","getFinalStatus","status","isNone","tmpWaitList","idx","stash_id","session_key","width","GridRow","waitAcc","fluid","Rating","defaultRating","maxRating","Input","toHex","Form","Field","UseCaseStaking","UseCaseHome","getHeader","lastHeader","hash","offchain","localStorageGet","res","isSome","className","to","path","UseCase","accountAddress","loader","getPair","Dimmer","active","Loader","centered","columns","padded","Message","negative","compact","floating","header","content","contextRef","createRef","ref","Sticky","context","stackable","Row","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf379d43.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst types = {\n  Address: 'MultiAddress',\n  AskPeriodNum: 'u64',\n  AskPointNum: 'u32',\n  AuthorityAres: 'AccountId',\n  AccountParticipateEstimates: {\n    account: 'AccountId',\n    end: 'BlockNumber',\n    estimates: 'Option<u64>',\n    range_index: 'Option<u8>',\n    eth_address: 'Option<Bytes>',\n    multiplier: 'MultiplierOption',\n    reward: 'u128'\n  },\n  AresPriceData: {\n    price: 'u64',\n    account_id: 'AccountId',\n    create_bn: 'BlockNumber',\n    fraction_len: 'FractionLength',\n    raw_number: 'JsonNumberValue',\n    timestamp: 'u64'\n  },\n  BalanceOf: 'Balance',\n  ChooseWinnersPayload: {\n    block_number: 'BlockNumber',\n    winners: 'Vec<AccountParticipateEstimates>',\n    public: 'AccountId',\n    estimates_config: 'Bytes',\n    symbol: 'Bytes',\n    price: '(u64, FractionLength)'\n  },\n  EstimatesState: {\n    _enum: [\n      'InActive',\n      'Active',\n      'WaitingPayout',\n      'Completed'\n    ]\n  },\n  EstimatesType: {\n    _enum: [\n      'DEVIATION', 'RANGE'\n    ]\n  },\n  FractionLength: 'u32',\n  HttpError: {\n    _enum: {\n      IoErr: 'Bytes',\n      TimeOut: 'Bytes',\n      StatusErr: '(Bytes,u16)',\n      ParseErr: 'Bytes'\n    }\n  },\n  HttpErrTracePayload: {\n    trace_data: 'HttpErrTraceData<BlockNumber, AuthorityId>',\n    auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  HttpErrTraceData: {\n    block_number: 'BlockNumber',\n    err_auth: 'AuthorityId',\n    err_status: 'HttpError',\n    tip: 'Bytes'\n  },\n  JsonNumberValue: {\n    integer: 'u64',\n    fraction: 'u64',\n    fraction_length: 'u32',\n    exponent: 'u32'\n  },\n  Keys: 'SessionKeys3',\n  LookupSource: 'MultiAddress',\n  MultiplierOption: {\n    _enum: [\n      'Base1', 'Base2', 'Base5'\n    ]\n  },\n  OcwControlData: {\n    need_verifier_check: 'bool',\n    open_free_price_reporter: 'bool',\n    open_paid_price_reporter: 'bool'\n  },\n  OffchainSignature: 'MultiSignature',\n  PaidValue: {\n    create_bn: 'BlockNumber',\n    amount: 'BalanceOf',\n    is_income: 'bool'\n  },\n  PurchasedId: 'Bytes',\n  PriceKey: 'Bytes',\n  PriceToken: 'Bytes',\n  PreCheckPayload: {\n    block_number: 'BlockNumber',\n    pre_check_stash: 'AccountId',\n    pre_check_auth: 'AuthorityId',\n    auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  PreCheckResultPayload: {\n    block_number: 'BlockNumber',\n    pre_check_list: 'Vec<PreCheckStruct>',\n    pre_check_stash: 'AccountId',\n    pre_check_auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  PreCheckCompareLog: {\n    chain_avg_price_list: 'BTreeMap<Bytes, (u64, FractionLength)>',\n    validator_up_price_list: 'BTreeMap<Bytes, (u64, FractionLength)>',\n    raw_precheck_list: 'Vec<PreCheckStruct>'\n  },\n  PreCheckStruct: {\n    price_key: 'Vec<u8>',\n    number_val: 'JsonNumberValue',\n    max_offset: 'Percent',\n    timestamp: 'u64'\n  },\n  PricePayloadSubPrice: '(PriceKey, u64, FractionLength, JsonNumberValue, u64)',\n  PricePayloadSubJumpBlock: '(PriceKey, RequestInterval)',\n  PricePayload: {\n    block_number: 'BlockNumber',\n    price: 'Vec<PricePayloadSubPrice>',\n    jump_block: 'Vec<PricePayloadSubJumpBlock>',\n    auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  PreCheckStatus: {\n    _enum: [\n      'Review',\n      'Prohibit',\n      'Pass'\n    ]\n  },\n  PurchasedRequestData: {\n    account_id: 'AccountId',\n    offer: 'BalanceOf',\n    create_bn: 'BlockNumber',\n    submit_threshold: 'u8',\n    max_duration: 'u64',\n    request_keys: 'Vec<Vec<u8>>'\n  },\n  PurchasedPricePayload: {\n    block_number: 'BlockNumber',\n    purchase_id: 'Vec<u8>',\n    price: 'Vec<PricePayloadSubPrice>',\n    auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  PurchasedAvgPriceData: {\n    create_bn: 'u64',\n    reached_type: 'u8',\n    price_data: '(u64, FractionLength)'\n  },\n  PurchasedDefaultData: {\n    submit_threshold: 'u8',\n    max_duration: 'u64',\n    avg_keep_duration: 'u64'\n  },\n  PurchasedForceCleanPayload: {\n    BlockNumber: 'BlockNumber',\n    purchase_id_list: 'Vec<Vec<u8>>',\n    auth: 'AuthorityId',\n    public: 'MultiSigner'\n  },\n  PurchaseId: 'Vec<u8>',\n  Releases: {\n    _enum: [\n      'V1_0_0_Ancestral',\n      'V1_0_1_HttpErrUpgrade',\n      'V1_1_0_HttpErrUpgrade',\n      'V1_2_0'\n    ]\n  },\n  RequestInterval: 'u8',\n  StatusErr: '(u16)',\n  SymbolEstimatesConfig: {\n    symbol: 'Bytes',\n    estimates_type: 'EstimatesType',\n    id: 'u64',\n    ticket_price: 'Balance',\n    symbol_completed_price: 'u64',\n    symbol_fraction: 'FractionLength',\n    start: 'BlockNumber',\n    end: 'BlockNumber',\n    distribute: 'BlockNumber',\n    deviation: 'Option<Permill>',\n    range: 'Option<Vec<u64>>',\n    total_reward: 'Balance',\n    state: 'EstimatesState'\n  }\n}\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, rpc: jsonrpc, types });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket'];\n  neededPropNames.forEach(key => {\n    console.log('neededPropNames.forEach', key);\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected\n    ? <Label pointing='left'>\n        <Icon name='money' color='green' />\n        {accountBalance}\n      </Label>\n    : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta>\n            <span>v{metadata.version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, socket } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>{socket}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Input,\n  Grid,\n  Card,\n  Statistic,\n  GridRow,\n  Label,\n  Icon,\n  Dropdown,\n  Button,\n  Table,\n  Container,\n  Rating\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { symbol } from 'prop-types';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  const [status, setStatus] = useState(null);\n  const [checkAddress, setCheckAddress] = useState('');\n  const [formState, setFormState] = useState({ addressTo: '', amount: 0 });\n  const [preCheckTaskList, setPreCheckTaskList] = useState([]);\n  const [finalPerCheckStatus, setFinalPerCheckStatus] = useState([]);\n  const [waitValidatorList, setWaitValidatorList] = useState([]);\n  const [waitValidatorSessionKeyList, setWaitValidatorSessionKeyList] = useState([]);\n\n  const onChange = (_, data) => {\n    // console.log('data = ', data);\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\n  };\n  const { addressTo, amount } = formState;\n  const availableAccounts = [];\n\n  const { keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  accounts.map(account => {\n    return availableAccounts.push({ key: account.meta.name, text: account.meta.name, value: account.address });\n  });\n\n  async function loadPreCheckTaskList () {\n    const authorities = await api.query.aresOracle.preCheckTaskList();\n    setPreCheckTaskList(authorities);\n    return authorities;\n  }\n\n  async function loadAresAuthorities () {\n    const authorities = await api.query.aresOracle.authorities();\n    setPreCheckTaskList(authorities);\n    return authorities;\n  }\n\n  async function loadFinalPerCheckResult (address) {\n    const authorities = await api.query.aresOracle.authorities();\n  }\n\n  async function loadStakingValidators () {\n    const exposures = await api.query.staking.validators.entries();\n    const resultList = [];\n    exposures.forEach(([key, exposure]) => {\n      const tmp = key.args.map((k) => k.toHuman());\n      resultList.push(tmp[0]);\n    });\n    return resultList;\n  }\n\n  async function loadSessionValidators () {\n    return api.query.session.validators();\n  }\n\n  async function countStakingWaitValidators () {\n    const sessionValidators = await loadSessionValidators();\n    const stakingValidators = await loadStakingValidators();\n    const resultList = [];\n    sessionValidators.map(sessionStash => {\n      const removeIdx = stakingValidators.findIndex((element) => element == sessionStash.toHuman());\n      stakingValidators.splice(removeIdx, 1);\n    });\n    return stakingValidators;\n  }\n\n  async function getSessionKeys (stashId) {\n    return api.query.session.nextKeys(stashId);\n  }\n\n  async function getFinalPerCheckResult (stashId) {\n    return api.query.aresOracle.finalPerCheckResult(stashId);\n  }\n\n  function getFinalStatus (stashId) {\n    const status = finalPerCheckStatus[stashId];\n    if (status.isNone) {\n      return '「None」';\n    }\n    return `「${status.value}」`;\n  }\n\n  useEffect(async () => {\n    console.log('addressTo = ', addressTo);\n    console.log('amount = ', amount);\n\n    await loadPreCheckTaskList();\n\n    // get waiting list\n    if (waitValidatorList.length === 0) {\n      await setWaitValidatorList(await countStakingWaitValidators());\n    }\n    const tmpWaitList = [];\n    for (const idx in waitValidatorList) {\n      const stashId = waitValidatorList[idx];\n      tmpWaitList.push({ stash_id: stashId, session_key: await getSessionKeys(stashId) });\n      const status = await getFinalPerCheckResult(stashId);\n      finalPerCheckStatus[stashId] = status;\n    }\n    await setWaitValidatorSessionKeyList(tmpWaitList);\n    await setFinalPerCheckStatus(finalPerCheckStatus);\n  }, [formState, waitValidatorList]);\n\n  return (\n        <Grid.Column width={16}>\n            <h1>Ares - Use cases staking.</h1>\n            <GridRow>\n                <h3>等待中的验证人：</h3>\n                {waitValidatorSessionKeyList.map(waitAcc => <Container fluid>\n                    <div>\n                        <p>验证人：{waitAcc.stash_id} <Rating icon='star' clearable defaultRating={0} maxRating={3}/></p>\n                        <p>Final Check Result: {getFinalStatus(waitAcc.stash_id)}</p>\n                        <p>Session key：<Input fluid value={waitAcc.session_key.value.toHex()}/></p>\n                    </div>\n                    <div>----</div>\n                </Container>)}\n            </GridRow>\n            <GridRow>\n                <Form>\n                    <GridRow>\n                        <h3>提审任务列表：</h3>\n                        <div>preCheckTaskList:</div>\n                        {preCheckTaskList.map(account =>\n                            <Container>\n                                <div>验证人：{account[0].toHuman()} <Rating icon='star' clearable defaultRating={0}\n                                                                        maxRating={3}/></div>\n                                <div>Auth：{account[1].toHuman()}</div>\n                                <div>AuthHex：{account[1].toHex()}</div>\n                                <div>提审区块：{account[2].toHuman()}</div>\n                                <div>----</div>\n                            </Container>\n                        )}\n                    </GridRow>\n                    <Form.Field>\n                        <Input\n                            fluid\n                            label='To'\n                            type='text'\n                            placeholder='address'\n                            value={checkAddress.value}\n                            onChange={setCheckAddress}\n                        />\n                    </Form.Field>\n                    <Form.Field style={{ textAlign: 'center' }}>\n                        <Button>Check</Button>\n                    </Form.Field>\n                </Form>\n            </GridRow>\n            {/*<GridRow>*/}\n            {/*    <h3>提审中的列表：</h3>*/}\n            {/*    <div>preCheckTaskList:</div>*/}\n            {/*    <div>finalPerCheckResult:</div>*/}\n            {/*</GridRow>*/}\n        </Grid.Column>\n  );\n}\n\nexport default function UseCaseStaking (props) {\n  const { api } = useSubstrate();\n  return api.query.session ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport {Form, Input, Grid, Card, Statistic, GridRow} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <Grid.Column width={16}>\n      Ares-Chain Use case.\n    </Grid.Column>\n  );\n}\n\nexport default function UseCaseHome (props) {\n  const { api } = useSubstrate();\n  return api.query.session ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport {Form, Input, Grid, Card, Statistic, GridRow} from 'semantic-ui-react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport { Routes, Route, Link } from \"react-router-dom\";\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport TemplateModule from \"./TemplateModule\";\nimport NodeInfo from \"./NodeInfo\";\nimport Metadata from \"./Metadata\";\nimport UseCaseStaking from \"./UseCaseStaking\";\nimport UseCaseHome from \"./UseCaseHome\";\n\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  useEffect(async () => {\n      const lastHeader = await api.rpc.chain.getHeader();\n      // Log the information\n      console.log(` last block #${lastHeader.number} has hash ${lastHeader.hash}`);\n\n      await api.rpc.offchain.localStorageGet(\"PERSISTENT\", \"0x6172652d6f63773a3a70726963655f726571756573745f646f6d61696e\").then((res)=>{\n          console.log('localStorage', res.isSome, res.value.toHuman());\n      });\n\n  }, []);\n\n  return (\n      <Grid.Column width={16}>\n          <BrowserRouter>\n              <div className=\"App\">\n                  <h1>Welcome to React Router!</h1>\n                  <Link to=\"/case_staking\">case_staking</Link>\n                  <Routes>\n                      <Route path=\"/\" element={<UseCaseHome />} />\n                      <Route path=\"case_staking\" element={<UseCaseStaking />} />\n                  </Routes>\n              </div>\n          </BrowserRouter>\n      </Grid.Column>\n  );\n}\n\nexport default function UseCase (props) {\n    return <Main {...props} />\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport Events from './Events';\nimport Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\nimport UseCase from \"./UseCase\";\nimport UseCaseStaking from \"./UseCaseStaking\";\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n            <Grid.Row>\n                <UseCase />\n            </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}